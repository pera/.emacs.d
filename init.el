(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
(setq-default inhibit-splash-screen t)
(setq initial-scratch-message "")
(setq initial-major-mode 'text-mode)
(setq default-major-mode 'text-mode)
(setq require-final-newline t)
(windmove-default-keybindings)
(setq confirm-kill-emacs 'y-or-n-p)
(global-set-key (kbd "C-x C-g") 'keyboard-quit)
(global-set-key (kbd "C-c C-g") 'keyboard-quit)
(global-set-key (kbd "C-x C-b") 'ibuffer)

(setq-default indicate-empty-lines t)
(setq-default tab-width 4)
(set-face-attribute 'default nil :font "Source Code Pro-10:weight=regular")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'inkpot t)
;;(set-face-background 'show-paren-match (face-background 'default))
;;(set-face-foreground 'show-paren-match "#d44")
(set-face-attribute 'show-paren-match nil :weight 'bold)
(tool-bar-mode -1)
(setq x-gtk-use-system-tooltips nil)
(column-number-mode t)
;;(global-linum-mode t) ; bug#10960 font size
;;(setq linum-format 'dynamic)
;;(defadvice linum-update-window (around linum-dynamic activate) (let* ((w (length (number-to-string (count-lines (point-min) (point-max))))) (linum-format (concat " %" (number-to-string w) "d "))) ad-do-it))
(setq show-paren-delay 0)
(show-paren-mode 1)
(global-hl-line-mode t)

(mouse-avoidance-mode 'cat-and-mouse)
(setq mouse-yank-at-point t)
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1) ((control))))
(setq mouse-wheel-progressive-speed nil)
(setq scroll-conservatively 1000)

(require 'recentf)
(recentf-mode 1)

(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("marmalade" . "https://marmalade-repo.org/packages/")))
(package-initialize)

(setq ivy-use-virtual-buffers t)
(global-set-key (kbd "C-c v") 'ivy-push-view)
(global-set-key (kbd "C-c V") 'ivy-pop-view)
(require 'ivy)
(ivy-mode 1)

(require 'ivy-rich)
(ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer)

(setq evil-want-C-u-scroll t)
(require 'evil)
(evil-mode 1)
(define-key key-translation-map (kbd "C-c") (lambda (prompt) (cond ((or (evil-insert-state-p) (evil-replace-state-p) (evil-visual-state-p)) [escape]) (t (kbd "C-c")))))

(require 'projectile)
(projectile-mode)

(require 'slime)
(setq inferior-lisp-program "/usr/bin/sbcl")
(setq slime-auto-connect 'ask)
;;(slime-setup '(slime-fancy))

(latex-preview-pane-enable)

